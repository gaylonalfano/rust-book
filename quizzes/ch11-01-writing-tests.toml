[[questions]]
id = "7a7bb518-b06e-4756-9510-6a8d0d1c84fa"
type = "ShortAnswer"
prompt.prompt = "What is the annotation you add to a function to indicate that it's a unit test?"
answer.answer = "#[test]"
context = """
This informs the cargo testing harness to treat the function as a test and not library code.
"""

[[questions]]
id = "cd77485f-723a-4978-8da6-c4ca3df44c44"
type = "MultipleChoice"
prompt.prompt = """
Let's say you have a function with the type signature:

```
fn f(x: usize) -> Result<usize, String>;
```

And you want to test that `f(0)` should return `Err(_)`. 
Which of the following is NOT a valid way to test that?
"""
answer.answer = """
```
#[test]
#[should_err]
fn test() -> Result<usize, String> {
  f(0)
}
```
  """
prompt.distractors = [
  """
```
#[test]
fn test() {
  assert!(f(0).is_err());
}
```
  """,
  """
```
#[test]
#[should_panic]
fn test() { 
  f(0).unwrap();
}
```
  """,
  """
```
#[test]
fn test() {
  assert!(match f(0) {
    Ok(_) => false,
    Err(_) => true
  });  
}
```
  """
]
context = """
`should_err` does not exist in Rust &mdash; any test that returns a `Result` must return `Ok` to pass.
"""