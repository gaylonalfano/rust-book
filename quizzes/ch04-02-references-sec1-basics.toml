[[questions]]
id = "0b8dbb4f-7c56-4b6e-8358-95c7b46f90c3"
type = "ShortAnswer"
prompt.prompt = """
Consider the following program, showing the state of memory after the last line:
```aquascope,interpreter
#fn main() {
let x = Box::new(0);
let y = Box::new(&x);`[]`
#}
```

If you wanted to copy out the number `0` through `y`, how many dereferences would you need to use? 
Write your answer as a digit. For example, if the correct expression is `*y`, then the answer is 1. 
"""
answer.answer = "3"
context = """
`***y` is the correct expression. `y` has the type `Box<&Box<i32>>`. It is a heap pointer to a stack reference 
to a heap pointer. Therefore `y` must be dereferenced three times, once for each layer of indirection.
"""

[[questions]]
id = "7cf19153-3647-4afc-953a-f9392ddb96fb"
type = "MultipleChoice"
prompt.prompt = """
Consider the following program, showing the state of memory after the last line:
 
```aquascope,interpreter
fn get_first(vr: &Vec<i32>) -> i32 {
  vr[0]
}

fn main() {
  let mut v = vec![0, 1, 2];
  let n = get_first(&v);
  println!("{} {}", n, v[1]);`[]` 
}
```

Which of the following best explains why `v` is not deallocated after calling `get_first`?
"""
answer.answer = "`vr` is a reference which does not own the vector it points to"
prompt.distractors = [
  "`vr` is not mutated within `get_first`",
  "`get_first` returns a value of type `i32`, not the vector itself",
  "`v` is used after calling `get_first` in the `println`"
]
context = """
References are non-owning pointers. Therefore passing `&v` to `get_first` does not move ownership of `v` into `get_first`,
and subsequently `v` is not deallocated after `get_first` ends.
"""