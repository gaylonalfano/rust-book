[[questions]]
id = "8c9f9173-c5ba-4914-9cfa-e3432f8414e1"
type = "MultipleChoice"
prompt.prompt = """
Which of the following is NOT a valid kind of fix to the issue of returning a stack reference from a function?
"""
answer.answer = "Extend the lifetime of the stack frame"
prompt.distractors = ["Use a reference-counted pointer", "Take ownership of the returned value", "Expect a mutable slot from the caller"]
context = """
A stack frame cannot have its lifetime extended, so that is not a valid solution.
"""

[[questions]]
id = "e6bc84ef-069c-4d1d-99ec-69b13492569c"
type = "MultipleChoice"
prompt.prompt = """
Let's say a programmer tried writing the following function:

```
/// Returns a person's name with "Ph.D." added as a title
fn award_phd(name: &String) -> String {
    let mut name = *name;
    name.push_str(", Ph.D.");
    name
}
```

The Rust compiler rejects their code with the following error:

```text
error[E0507]: cannot move out of `*name` which is behind a shared reference
 --> test.rs:3:20
  |
3 |     let mut name = *name;
  |                    ^^^^^
  |                    |
  |                    move occurs because `*name` has type `String`, which does not implement the `Copy` trait
  |                    help: consider borrowing here: `&*name`
```

Given the stated purpose of the function, which of the following would be the most idiomatic fix to the program? 
The differences from the function above are highlighted.
"""
answer.answer = """
```
fn award_phd(name: &String) -> String {
    let mut name = `[name.clone()]`;
    name.push_str(", Ph.D.");
    name
}
```
"""
prompt.distractors = [
"""
```
fn award_phd(name: &String) -> String {
    let mut name = `[&*name]`;
    name.push_str(", Ph.D.");
    name
}
```
""",
"""
```
fn award_phd(`[mut name: String]`) -> String {
    name.push_str(", Ph.D.");
    name
}
```
""",
"""
```
fn award_phd(`[name: &mut String]`) {
    name.push_str(", Ph.D.");
}
```
"""
]
context = """
The function is not intended to change someone's original name, so changing the type of `name` to either `&mut String` or `String` 
would be inappropriate. The solution proposed by the compiler of `&*name` is not sufficient --- an acceptable solution is to 
clone the data with `name.clone()` and mutate the local copy.
"""

[[questions]]
id = "8020e4a2-f0b4-4eae-90ac-a87712d9d00b"
type = "MultipleChoice"
prompt.prompt = """
Let's say a programmer tried writing the following function:

```
/// Rounds all the floats in a vector to the nearest integer, in-place
fn round_in_place(v: &Vec<f32>) {
    for n in v {
        *n = n.round();
    }
}
```

The Rust compiler rejects their code with the following error:

```text
error[E0594]: cannot assign to `*n`, which is behind a `&` reference
 --> test.rs:4:9
  |
3 |     for n in v {
  |              - this iterator yields `&` references
4 |         *n = n.round();
  |         ^^^^^^^^^^^^^^ `n` is a `&` reference, so the data it refers to cannot be written
```

Given the stated purpose of the function, which of the following would be the most idiomatic fix to the program? 
The differences from the function above are highlighted.
"""
answer.answer = """
```
fn round_in_place(v: `[&mut Vec<f32>]`) {
    for n in v {
        *n = n.round();
    }
}
```
"""
prompt.distractors = [
"""
```
fn round_in_place(v: &Vec<f32>) `[-> Vec<f32>]` {
    `[let mut v2 = Vec::new();]`
    for n in v {
        `[v2.push(n.round());]`
    }
    `[v2]`
}
```
""",
"""
```
fn round_in_place(`[mut v: Vec<f32>]`) {
    for n in v {
        *n = n.round();
    }    
}
```
""",
"""
```
fn round_in_place(v: &Vec<f32>) {
    for `[mut n]` in `[&mut v.clone()]` {
        n = n.round();
    }    
}
```
""",
]
context = """
Because this function is supposed to round a vector in-place, it would not be
idiomatic to return a new copy of the same vector (`-> Vec<f32>`) or to consume
ownership of the vector (`mut v: Vec<f32>`). The best solution is to change 
the type signature from `&Vec<f32>` to `&mut Vec<f32>`.
"""
